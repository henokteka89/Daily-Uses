-- Drop existing session if it exists
IF EXISTS (SELECT * FROM sys.server_event_sessions WHERE name = 'rpc')
    DROP EVENT SESSION [rpc] ON SERVER;
GO

-- Create optimized in-memory session
CREATE EVENT SESSION [rpc] ON SERVER
ADD EVENT sqlserver.rpc_completed
(
    ACTION(sqlserver.database_id, sqlserver.sql_text, sqlserver.username)
    WHERE (object_name LIKE 'sp_GetPostsByTag' AND cpu_time > 500000)
)
ADD TARGET package0.ring_buffer
WITH (
    MAX_MEMORY = 1024 KB,       -- Reduced memory footprint
    EVENT_RETENTION_MODE = ALLOW_SINGLE_EVENT_LOSS,
    MAX_DISPATCH_LATENCY = 5 SECONDS,  -- Faster dispatch
    MAX_EVENT_SIZE = 0 KB,
    MEMORY_PARTITION_MODE = NONE,
    TRACK_CAUSALITY = OFF,
    STARTUP_STATE = OFF
);
GO
ALTER EVENT SESSION [rpc] ON SERVER STATE = START;
ALTER EVENT SESSION [rpc] ON SERVER STATE = STOP;

-- Query the ring_buffer for captured events
SELECT
    DATEADD(mi, DATEDIFF(mi, GETUTCDATE(), GETDATE()),
        CAST(event_data.value('(/event/@timestamp)[1]', 'datetime2') as datetime2)) AS [Event Time],
    event_data.value('(/event/data[@name="cpu_time"]/value)[1]', 'int') AS [CPU Time],
    event_data.value('(/event/action[@name="sql_text"]/value)[1]', 'nvarchar(max)') AS [SQL Text],
    event_data.value('(/event/action[@name="username"]/value)[1]', 'nvarchar(256)') AS [Username],
    event_data.value('(/event/action[@name="database_id"]/value)[1]', 'int') AS [Database ID],
    event_data.value('(/event/data[@name="statement"]/value)[1]', 'nvarchar(max)') AS STATEMENT
FROM (
    SELECT CAST(target_data AS XML) AS target_data
    FROM sys.dm_xe_sessions AS s
    JOIN sys.dm_xe_session_targets AS t
        ON s.address = t.event_session_address
    WHERE s.name = 'rpc'
      AND t.target_name = 'ring_buffer'
) AS tab
CROSS APPLY target_data.nodes('//RingBufferTarget/event') AS split(event_data);
